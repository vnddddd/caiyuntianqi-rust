name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      BIN_NAME: caiyun-weather-rust

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: cargo build --release

      - name: Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          strip target/release/${{ env.BIN_NAME }} || true
          mkdir -p dist/${{ env.BIN_NAME }}-linux
          cp target/release/${{ env.BIN_NAME }} dist/${{ env.BIN_NAME }}-linux/
          if [ -d static ]; then cp -r static dist/${{ env.BIN_NAME }}-linux/; fi
          if [ -f .env.example ]; then cp .env.example dist/${{ env.BIN_NAME }}-linux/; fi
          tar -C dist -czf ${{ env.BIN_NAME }}-linux.tar.gz ${{ env.BIN_NAME }}-linux

      - name: Package (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          strip target/release/${{ env.BIN_NAME }} || true
          mkdir -p dist/${{ env.BIN_NAME }}-macos
          cp target/release/${{ env.BIN_NAME }} dist/${{ env.BIN_NAME }}-macos/
          if [ -d static ]; then cp -r static dist/${{ env.BIN_NAME }}-macos/; fi
          if [ -f .env.example ]; then cp .env.example dist/${{ env.BIN_NAME }}-macos/; fi
          tar -C dist -czf ${{ env.BIN_NAME }}-macos.tar.gz ${{ env.BIN_NAME }}-macos

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $dir = "${{ env.BIN_NAME }}-windows"
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          New-Item -ItemType Directory -Force -Path "dist\$dir" | Out-Null
          Copy-Item "target\release\${{ env.BIN_NAME }}.exe" "dist\$dir\"
          if (Test-Path -Path "static") { Copy-Item "static" "dist\$dir\" -Recurse }
          if (Test-Path -Path ".env.example") { Copy-Item ".env.example" "dist\$dir\" }
          Compress-Archive -Path "dist\$dir\*" -DestinationPath "${{ env.BIN_NAME }}-windows.zip"

      - name: Upload asset (Linux)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BIN_NAME }}-linux.tar.gz

      - name: Upload asset (macOS)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BIN_NAME }}-macos.tar.gz

      - name: Upload asset (Windows)
        if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.BIN_NAME }}-windows.zip


  docker:
    name: Docker Build & Push (GHCR)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/caiyun-weather-rust
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


